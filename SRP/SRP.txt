Add new FileSaver.cs

public class FileSaver
{
    public void SaveToFile<T>(string directoryPath, string fileName, IEntryManager<T> workReport)
    {
        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }

        File.WriteAllText(Path.Combine(directoryPath, fileName), workReport.ToString());
    }
}

Definition
While developing a project, we strive to write maintainable and readable code (beside the working part 😀 ). To accomplish this, each and every class should do its own task and do it well.
Yes, it is quite important for a class to have no more than one task. If it does, our code becomes harder to maintain, due to the fact that it is responsible for the execution of several different tasks and thus being more likely to change in the future.

This is completely opposite of what the Single Responsibility Principle (SRP) states.

The Single Responsibility Principle states that our classes should have only one reason to change or in other words, it should have only one responsibility.

Simple as that.


Problems With This Code
We can add even more features in this class, like the Load or UploadToCloud methods because they are all related to our WorkReport, 
but, just because we can doesn’t mean we have to do it.
Right now, there is one issue with the WorkReport class.
It has more than one responsibility.


Its job is not only to keep track of our work report entries but to save the entire work report to a file.
This means that we are violating the SRP and our class has more than one reason to change in the future.

The first reason to change this class is if we want to modify the way we keep track of our entries.But if we want to save a file in a different way, 
that is entirely a new reason to change our class. And imagine what this class would look like if we added additional functionalities to it.We would have so many unrelated code parts in a single class.
So, in order to avoid that, let’s refactor the code.
